module AbsJavalette where

-- Haskell module generated by the BNF converter


newtype Ident = Ident String deriving (Eq,Ord,Show)
data Program =
   Program [TopDef]
  deriving (Eq,Ord,Show)

data TopDef =
   FnDef Type Ident [Arg] Block
 | StructDef Ident [StrDecl]
 | TypeDef Ident Ident
 | ClassDef Ident [ClassDecl]
 | ExtendDef Ident Ident [ClassDecl]
  deriving (Eq,Ord,Show)

data Arg =
   Arg Type Ident
  deriving (Eq,Ord,Show)

data StrDecl =
   StrDecl Type [Ident]
  deriving (Eq,Ord,Show)

data ClassDecl =
   ClassVar StrDecl
 | Method Type Ident [Arg] Block
  deriving (Eq,Ord,Show)

data Block =
   Block [Stmt]
  deriving (Eq,Ord,Show)

data Stmt =
   Empty
 | BStmt Block
 | Decl Type [Item]
 | Ass Variable Expr
 | Incr Variable
 | Decr Variable
 | Ret Expr
 | VRet
 | Cond Expr Stmt
 | CondElse Expr Stmt Stmt
 | While Expr Stmt
 | For Type Ident Expr Stmt
 | SExp Expr
  deriving (Eq,Ord,Show)

data Item =
   NoInit Ident
 | Init Ident Expr
  deriving (Eq,Ord,Show)

data Type =
   Int
 | Doub
 | Bool
 | Void
 | Custom Ident
 | Array Type
 | String
 | Fun Type [Type]
 | Pointer Ident
 | Wildcard
  deriving (Eq,Ord,Show)

data Variable =
   VIdent Ident
 | VIndex Ident [ArrayIndex]
 | VDeref Variable Variable
 | VAnnDeref Type Variable Variable
  deriving (Eq,Ord,Show)

data ArrayIndex =
   AIndex Expr
  deriving (Eq,Ord,Show)

data Expr =
   EVar Variable
 | ELitInt Integer
 | ELitDoub Double
 | ELitTrue
 | ELitFalse
 | ENew Ident
 | ENewClass Ident
 | ENewArr Type [ArrayIndex]
 | ENull Type
 | EApp Ident [Expr]
 | EString String
 | EDot Expr Expr
 | Neg Expr
 | Not Expr
 | EMul Expr MulOp Expr
 | EAdd Expr AddOp Expr
 | ERel Expr RelOp Expr
 | EAnd Expr Expr
 | EOr Expr Expr
 | Ann Type Expr
 | ELength
 | ObjCast Type Expr
  deriving (Eq,Ord,Show)

data AddOp =
   Plus
 | Minus
  deriving (Eq,Ord,Show)

data MulOp =
   Times
 | Div
 | Mod
  deriving (Eq,Ord,Show)

data RelOp =
   LTH
 | LE
 | GTH
 | GE
 | EQU
 | NE
  deriving (Eq,Ord,Show)


-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParJavalette where
import AbsJavalette
import LexJavalette
import ErrM

}

%name pProgram Program

-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype { Token }

%token 
 '!' { PT _ (TS _ 1) }
 '!=' { PT _ (TS _ 2) }
 '%' { PT _ (TS _ 3) }
 '&&' { PT _ (TS _ 4) }
 '(' { PT _ (TS _ 5) }
 ')' { PT _ (TS _ 6) }
 ')null' { PT _ (TS _ 7) }
 '*' { PT _ (TS _ 8) }
 '+' { PT _ (TS _ 9) }
 '++' { PT _ (TS _ 10) }
 ',' { PT _ (TS _ 11) }
 '-' { PT _ (TS _ 12) }
 '--' { PT _ (TS _ 13) }
 '->' { PT _ (TS _ 14) }
 '.' { PT _ (TS _ 15) }
 '/' { PT _ (TS _ 16) }
 ':' { PT _ (TS _ 17) }
 ';' { PT _ (TS _ 18) }
 '<' { PT _ (TS _ 19) }
 '<=' { PT _ (TS _ 20) }
 '=' { PT _ (TS _ 21) }
 '==' { PT _ (TS _ 22) }
 '>' { PT _ (TS _ 23) }
 '>=' { PT _ (TS _ 24) }
 '[' { PT _ (TS _ 25) }
 '[]' { PT _ (TS _ 26) }
 ']' { PT _ (TS _ 27) }
 '_*_' { PT _ (TS _ 28) }
 '_length' { PT _ (TS _ 29) }
 '_string' { PT _ (TS _ 30) }
 'boolean' { PT _ (TS _ 31) }
 'class' { PT _ (TS _ 32) }
 'double' { PT _ (TS _ 33) }
 'else' { PT _ (TS _ 34) }
 'extends' { PT _ (TS _ 35) }
 'false' { PT _ (TS _ 36) }
 'for' { PT _ (TS _ 37) }
 'if' { PT _ (TS _ 38) }
 'int' { PT _ (TS _ 39) }
 'new' { PT _ (TS _ 40) }
 'return' { PT _ (TS _ 41) }
 'struct' { PT _ (TS _ 42) }
 'true' { PT _ (TS _ 43) }
 'typedef' { PT _ (TS _ 44) }
 'void' { PT _ (TS _ 45) }
 'while' { PT _ (TS _ 46) }
 '{' { PT _ (TS _ 47) }
 '||' { PT _ (TS _ 48) }
 '}' { PT _ (TS _ 49) }

L_ident  { PT _ (TV $$) }
L_integ  { PT _ (TI $$) }
L_doubl  { PT _ (TD $$) }
L_quoted { PT _ (TL $$) }
L_err    { _ }


%%

Ident   :: { Ident }   : L_ident  { Ident $1 }
Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }
Double  :: { Double }  : L_doubl  { (read ( $1)) :: Double }
String  :: { String }  : L_quoted {  $1 }

Program :: { Program }
Program : ListTopDef { Program $1 } 


TopDef :: { TopDef }
TopDef : Type Ident '(' ListArg ')' Block { FnDef $1 $2 $4 $6 } 
  | 'struct' Ident '{' ListStrDecl '}' ';' { StructDef $2 (reverse $4) }
  | 'typedef' 'struct' Ident '*' Ident ';' { TypeDef $3 $5 }
  | 'class' Ident '{' ListClassDecl '}' { ClassDef $2 (reverse $4) }
  | 'class' Ident 'extends' Ident '{' ListClassDecl '}' { ExtendDef $2 $4 (reverse $6) }


ListTopDef :: { [TopDef] }
ListTopDef : TopDef { (:[]) $1 } 
  | TopDef ListTopDef { (:) $1 $2 }


Arg :: { Arg }
Arg : Type Ident { Arg $1 $2 } 


ListArg :: { [Arg] }
ListArg : {- empty -} { [] } 
  | Arg { (:[]) $1 }
  | Arg ',' ListArg { (:) $1 $3 }


StrDecl :: { StrDecl }
StrDecl : Type ListIdent { StrDecl $1 $2 } 


ListStrDecl :: { [StrDecl] }
ListStrDecl : {- empty -} { [] } 
  | ListStrDecl StrDecl ';' { flip (:) $1 $2 }


ListIdent :: { [Ident] }
ListIdent : {- empty -} { [] } 
  | Ident { (:[]) $1 }
  | Ident ',' ListIdent { (:) $1 $3 }


ClassDecl :: { ClassDecl }
ClassDecl : StrDecl ';' { ClassVar $1 } 
  | Type Ident '(' ListArg ')' Block { Method $1 $2 $4 $6 }


ListClassDecl :: { [ClassDecl] }
ListClassDecl : {- empty -} { [] } 
  | ListClassDecl ClassDecl { flip (:) $1 $2 }


Block :: { Block }
Block : '{' ListStmt '}' { Block (reverse $2) } 


ListStmt :: { [Stmt] }
ListStmt : {- empty -} { [] } 
  | ListStmt Stmt { flip (:) $1 $2 }


Stmt :: { Stmt }
Stmt : ';' { Empty } 
  | Block { BStmt $1 }
  | Type ListItem ';' { Decl $1 $2 }
  | Variable '=' Expr ';' { Ass $1 $3 }
  | Variable '++' ';' { Incr $1 }
  | Variable '--' ';' { Decr $1 }
  | 'return' Expr ';' { Ret $2 }
  | 'return' ';' { VRet }
  | 'if' '(' Expr ')' Stmt { Cond $3 $5 }
  | 'if' '(' Expr ')' Stmt 'else' Stmt { CondElse $3 $5 $7 }
  | 'while' '(' Expr ')' Stmt { While $3 $5 }
  | 'for' '(' Type Ident ':' Expr ')' Stmt { For $3 $4 $6 $8 }
  | Expr ';' { SExp $1 }


Item :: { Item }
Item : Ident { NoInit $1 } 
  | Ident '=' Expr { Init $1 $3 }


ListItem :: { [Item] }
ListItem : Item { (:[]) $1 } 
  | Item ',' ListItem { (:) $1 $3 }


Type1 :: { Type }
Type1 : 'int' { Int } 
  | 'double' { Doub }
  | 'boolean' { Bool }
  | 'void' { Void }
  | Ident { Custom $1 }


Type :: { Type }
Type : Type '[]' { Array $1 } 
  | Type1 { $1 }


ListType :: { [Type] }
ListType : {- empty -} { [] } 
  | Type { (:[]) $1 }
  | Type ',' ListType { (:) $1 $3 }


Variable1 :: { Variable }
Variable1 : Ident { VIdent $1 } 
  | Ident ListArrayIndex { VIndex $1 $2 }


Variable :: { Variable }
Variable : Variable '->' Variable1 { VDeref $1 $3 } 
  | Variable1 { $1 }


ArrayIndex :: { ArrayIndex }
ArrayIndex : '[' Expr ']' { AIndex $2 } 


ListArrayIndex :: { [ArrayIndex] }
ListArrayIndex : ArrayIndex { (:[]) $1 } 
  | ArrayIndex ListArrayIndex { (:) $1 $2 }


Expr7 :: { Expr }
Expr7 : Variable { EVar $1 } 
  | Integer { ELitInt $1 }
  | Double { ELitDoub $1 }
  | 'true' { ELitTrue }
  | 'false' { ELitFalse }
  | 'new' Ident { ENew $2 }
  | 'new' Type1 ListArrayIndex { ENewArr $2 $3 }
  | '(' Type ')null' { ENull $2 }
  | Ident '(' ListExpr ')' { EApp $1 $3 }
  | String { EString $1 }
  | '(' Expr ')' { $2 }


Expr6 :: { Expr }
Expr6 : Expr6 '.' Expr7 { EDot $1 $3 } 
  | Expr7 { $1 }


Expr5 :: { Expr }
Expr5 : '-' Expr6 { Neg $2 } 
  | '!' Expr6 { Not $2 }
  | Expr6 { $1 }


Expr4 :: { Expr }
Expr4 : Expr4 MulOp Expr5 { EMul $1 $2 $3 } 
  | Expr5 { $1 }


Expr3 :: { Expr }
Expr3 : Expr3 AddOp Expr4 { EAdd $1 $2 $3 } 
  | Expr4 { $1 }


Expr2 :: { Expr }
Expr2 : Expr2 RelOp Expr3 { ERel $1 $2 $3 } 
  | Expr3 { $1 }


Expr1 :: { Expr }
Expr1 : Expr2 '&&' Expr1 { EAnd $1 $3 } 
  | Expr2 { $1 }


Expr :: { Expr }
Expr : Expr1 '||' Expr { EOr $1 $3 } 
  | Expr1 { $1 }


ListExpr :: { [Expr] }
ListExpr : {- empty -} { [] } 
  | Expr { (:[]) $1 }
  | Expr ',' ListExpr { (:) $1 $3 }


AddOp :: { AddOp }
AddOp : '+' { Plus } 
  | '-' { Minus }


MulOp :: { MulOp }
MulOp : '*' { Times } 
  | '/' { Div }
  | '%' { Mod }


RelOp :: { RelOp }
RelOp : '<' { LTH } 
  | '<=' { LE }
  | '>' { GTH }
  | '>=' { GE }
  | '==' { EQU }
  | '!=' { NE }



{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

